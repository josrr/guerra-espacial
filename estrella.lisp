(in-package #:guerra-espacial)

(defun carga-estrellas (lista)
  (mapcan (lambda (grupo)
            (mapcar (lambda (e)
                      (list :x (- *ancho-mapa-estelar* (first e))
                            :y (+ 511 (- (second e)))
                            :nombre (fourth e)
                            :constelacion (fifth e)
                            :magnitud (car grupo)))
                    (cdr grupo)))
          lista))

(defun estrellas-max-x (estrellas)
  (apply #'max (mapcar (lambda (e) (getf e :x)) estrellas)))

(defun dibuja-estrellas (pane max-x)
  (with-bounding-rectangle* (x0 y0 x1 y1) (sheet-region pane)
    (labels ((dibuja-estrella (x y m color)
               (let ((r (- (+ 6 (random 1.125)) m))
                     (c (* 0.5 color)))
                 (draw-point* pane x y :ink (clim:make-rgb-color (* 0.4 c) c c) :line-thickness (* 2.0 r))
                 (draw-point* pane x y :ink (clim:make-rgb-color (* 0.4 color) color color) :line-thickness (* 1.0 r)))))
      (with-slots (y fondo estrellas) pane
        (draw-rectangle* pane x0 y0 x1 y1 :filled t :ink fondo)
        (let ((x (espacio-x pane)))
          (loop with limite-derecho = (+ x x1)
             for punto in (remove-if (lambda (e)
                                       (let ((e-x (getf e :x)))
                                         (or (> e-x limite-derecho) (< e-x x))))
                                     (espacio-estrellas pane))
             do (dibuja-estrella (- (getf punto :x) x)
                                 (getf punto :y)
                                 (getf punto :magnitud)
                                 (/ (- 8.0 (getf punto :magnitud)) 8.0)))
          (when (or (> (+ x x1) max-x) (< (- max-x x) x1))
            (loop with inicio-x = (- max-x x)
               with borde-x = (- x1 inicio-x)
               for punto in (remove-if (lambda (e) (> (getf e :x) borde-x)) (espacio-estrellas pane))
               initially (draw-line* pane inicio-x 0 inicio-x y1 :ink +gray5+ :line-thickness 1)
               do (dibuja-estrella (+ (getf punto :x) inicio-x)
                                   (getf punto :y)
                                   (getf punto :magnitud)
                                   (/ (- 8.0 (getf punto :magnitud)) 8.0))))
          (setf (espacio-x pane) (- x *desp-x*)))))))

(defun dibuja-estrella (pane x y)
  (let ((r (random 3)))
    (draw-point* pane x y :ink +green+   :line-thickness (+ 22 (* 6 r)))
    (draw-point* pane x y :ink +cyan+    :line-thickness (+ 20 (* 4 r)))
    (draw-point* pane x y :ink +yellow2+ :line-thickness (+ 18 (* 3 r)))
    (draw-point* pane x y :ink +white+   :line-thickness (+ 16 r))))

(defun dibuja-estrella-% (pane x y)
  (let ((dx (- (random 30) 20))
        (dy (- (random 30) 20)))
    (draw-line* pane (- x dx) (- y dy) (+ x dx) (+ y dy) :line-thickness 3 :ink +yellow+)
    (draw-line* pane (- x dx) (- y dy) (+ x dx) (+ y dy) :line-thickness 2 :ink +light-sky-blue+)))
